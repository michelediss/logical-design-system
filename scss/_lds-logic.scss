// _lds-logic.scss

// =========================
// Typography Logic
// =========================

// Scale names (above base)
$scale-names-above-base: (
  'base', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', '6xl', '7xl', '8xl', '9xl'
) !global;

// Scale names (below base)
$scale-names-below-base: (
  'xs', 'sm'
) !global;

// Bootstrap breakpoints (assumes $grid-breakpoints is defined)
$breakpoints: $grid-breakpoints !global;

// Power function
@function pow($base, $exponent) {
  $result: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $result: $result * $base;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through abs($exponent) {
      $result: $result / $base;
    }
  }
  @return $result;
}

// Responsive base font-size mixin (applied to html)
// Uses baseSize and incrementFactor from settings map
@mixin generateResponsiveBaseFontSize($settings-map) {
  $baseSize: map-get($settings-map, baseSize);
  $incrementFactor: map-get($settings-map, incrementFactor);

  html {
    font-size: #{$baseSize}px;
  }

  @each $bp-name, $bp-value in $breakpoints {
    // Current breakpoint index (starting at 0)
    $index: index(map-keys($breakpoints), $bp-name) - 1;
    $size: $baseSize * pow($incrementFactor, $index + 1);
    $size: round($size * 1000) / 1000;

    @media (min-width: $bp-value) {
      html {
        font-size: #{$size}px;
      }
    }
  }
}

// Use paragraph settings for global font-size
@include generateResponsiveBaseFontSize(map-get($BaseSettings, paragraph));

// Generate typographic scale
@function generateTypographicScale($baseFontSize, $ratio, $scaleNamesAboveBase, $scaleNamesBelowBase) {
  $scale: ();

  // Sizes at and above base
  @for $i from 0 through length($scaleNamesAboveBase) - 1 {
    $size: $baseFontSize * pow($ratio, $i);
    $size: round($size * 1000) / 1000;
    // Name is 'base' if $i is 0; otherwise, use next name
    $scale-name: if($i == 0, 'base', nth($scaleNamesAboveBase, $i + 1));
    $scale: map-merge($scale, ($scale-name: $size));
  }

  // Sizes below base
  @for $i from 1 through length($scaleNamesBelowBase) {
    $size: $baseFontSize / pow($ratio, $i);
    $size: round($size * 1000) / 1000;
    $scale-name: nth($scaleNamesBelowBase, length($scaleNamesBelowBase) - $i + 1);
    $scale: map-merge($scale, ($scale-name: $size));
  }

  @return $scale;
}

// Typography classes mixin
// Generates classes: .[prefix].text-[scaleName] and responsive variants
@mixin createTypographyClasses($scale, $class-prefix) {
  @each $name, $size in $scale {
    .#{$class-prefix}.text-#{$name} {
      font-size: $size;
    }
  }

  @each $breakpoint, $breakpoint-size in $breakpoints {
    @media (min-width: $breakpoint-size) {
      @each $name, $size in $scale {
        .#{$class-prefix}.text-#{$breakpoint}-#{$name} {
          font-size: $size;
        }
      }
    }
  }
}

// Loop through each type in $BaseSettings (e.g. paragraph, heading, caption)
// Generate typographic scales for each
@each $type, $settings in $BaseSettings {
  // Base font-size of 1rem (matches html font-size)
  $font-scale: generateTypographicScale(1rem, map-get($settings, r), $scale-names-above-base, $scale-names-below-base);
  @include createTypographyClasses($font-scale, $type);
}


// =========================
// Color Logic
// =========================

// Lighten a color by mixing with white
@function tint-color($color, $percent) {
  @return mix(white, $color, $percent);
}

// Darken a color by mixing with black
@function shade-color($color, $percent) {
  @return mix(black, $color, $percent);
}

// Generate a color scale
@function generate-color-scale($name, $color) {
  $scale: (
    "#{$name}-50": tint-color($color, 90%),
    "#{$name}-100": tint-color($color, 80%),
    "#{$name}-200": tint-color($color, 60%),
    "#{$name}-300": tint-color($color, 40%),
    "#{$name}-400": tint-color($color, 20%),
    "#{$name}-500": $color,
    "#{$name}-600": shade-color($color, 20%),
    "#{$name}-700": shade-color($color, 40%),
    "#{$name}-800": shade-color($color, 60%),
    "#{$name}-900": shade-color($color, 80%),
    "#{$name}-950": shade-color($color, 90%)
  );
  
  @return $scale;
}

// Generate classes for background, text, border, and fill colors
@mixin generate-color-classes($color-map) {
  @each $key, $val in $color-map {
    .bg-#{$key} {
      background-color: $val !important;
    }
    .text-#{$key} {
      color: $val !important;
    }
    .border-#{$key} {
      border-color: $val !important;
    }
    .fill-#{$key} {
      fill: $val !important;
    }
  }
}

// Fill classes for black and white
.fill-black {
  fill: $black;
}

.fill-white {
  fill: $white;
}


// =========================
// Containers & Breakpoints
// =========================

@mixin container-max-widths($breakpoints, $max-widths) {
  @each $label, $min-width in $breakpoints {
    @if map-has-key($max-widths, $label) {
      @media (min-width: #{map-get($breakpoints, $label)}) {
        .container {
          max-width: map-get($max-widths, $label);
        }
      }
    }
  }
}

@include container-max-widths($grid-breakpoints, $container-max-widths);
