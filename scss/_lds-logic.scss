// _lds-logic.scss 

// ========================================
// Typographic Logic
// ========================================

// ====== font size intervals

$scale-names-above-base: (
  'base', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', '6xl', '7xl', '8xl', '9xl'
) !global;

$scale-names-below-base: (
  'xs', 'sm'
) !global;

// ====== Bootstrap breakpoints

$breakpoints: $grid-breakpoints !global;

// ====== global map containing all sub-maps

$settings: (
  responsiveBaseFontSize: $responsiveBaseFontSize,
  customFontSizeScale: $customFontSizeScale,
  scaleNamesAboveBase: $scale-names-above-base,
  scaleNamesBelowBase: $scale-names-below-base
) !global;

// ====== Pow function

@function pow($base, $exponent) {
  $result: 1;
  // Management of positive exponents
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $result: $result * $base;
    }
  }
  // Management of negative exponents
  @else if $exponent < 0 {
    @for $i from 1 through abs($exponent) {
      $result: $result / $base;
    }
  }
  // $exponent == 0 always returns 1 for any base
  @return $result;
}

// ====== Mixin to generate responsive font sizes

@mixin generateResponsiveBaseFontSize {
  $baseSize: map-get(map-get($settings, 'responsiveBaseFontSize'), 'baseSize');
  $incrementFactor: map-get(map-get($settings, 'responsiveBaseFontSize'), 'incrementFactor');

  html {
    font-size: #{$baseSize}px; // root font size
  }

  // Calculates and applies the font size for each breakpoint
  @each $key, $value in $breakpoints {
    $index: index(map-keys($breakpoints), $key) - 1; // Calculates the correct index for the first breakpoint
    $size: $baseSize * pow($incrementFactor, $index + 1); // Calculate new font size
    $size: round($size * 100) / 100; // Rounding to two decimal places

    @media (min-width: $value) {
      html {
        font-size: #{$size}px; // Apply the calculated dimension
      }
    }
  }
}

@include generateResponsiveBaseFontSize;

// ====== Function to generate the typographical scale

@function generateTypographicScale($baseFontSize, $ratio, $scaleNamesAboveBase, $scaleNamesBelowBase) {
  $scale: ();

  // Generate sizes above the base
  @for $i from 0 through length($scaleNamesAboveBase) - 1 {
    $size: $baseFontSize * pow($ratio, $i);
    $size: round($size * 100) / 100;
    $scale-name: if($i == 0, 'base', nth($scaleNamesAboveBase, $i + 1));
    $scale: map-merge($scale, ($scale-name: $size));
  }

  // Generate sizes below the base
  @for $i from 1 through length($scaleNamesBelowBase) {
    $size: $baseFontSize / pow($ratio, $i);
    $size: round($size * 100) / 100;
    $scale-name: nth($scaleNamesBelowBase, length($scaleNamesBelowBase) - $i + 1);
    $scale: map-merge($scale, ($scale-name: $size));
  }

  @return $scale;
}

// Generate custom font scale
$custom-font-scale: generateTypographicScale(
  1rem,
  map-get($customFontSizeScale, 'r'),
  map-get($settings, 'scaleNamesAboveBase'),
  map-get($settings, 'scaleNamesBelowBase'),
);

// ====== Mixins to create classes

// Mixin to create typography classes
@mixin createTypographyClasses {
  @each $name, $size in $custom-font-scale {
    .text-#{$name} {
      font-size: $size;
    }
  }

  // Mixin to create responsive typography classes
  @each $breakpoint, $breakpoint-size in $breakpoints {
    @media (min-width: $breakpoint-size) {
      @each $name, $size in $custom-font-scale {
        .text-#{$breakpoint}-#{$name} {
          font-size: $size;
        }
      }
    }
  }
}

@include createTypographyClasses;


// ========================================
// Cromatic Logic
// ========================================

// Function to lighten a color (tint) by mixing it with white
@function tint-color($color, $percent) {
  @return mix(white, $color, $percent);
}

// Function to darken a color (shade) by mixing it with black
@function shade-color($color, $percent) {
  @return mix(black, $color, $percent);
}

// Function to generate a color scale similar to Bootstrap
// Example: ("red-100": ..., "red-200": ..., ..., "red-900": ...)
@function generate-color-scale($name, $color) {
  $scale: (
    "#{$name}-100": tint-color($color, 80%),
    "#{$name}-200": tint-color($color, 60%),
    "#{$name}-300": tint-color($color, 40%),
    "#{$name}-400": tint-color($color, 20%),
    "#{$name}-500": $color,
    "#{$name}-600": shade-color($color, 20%),
    "#{$name}-700": shade-color($color, 40%),
    "#{$name}-800": shade-color($color, 60%),
    "#{$name}-900": shade-color($color, 80%)
  );
  
  @return $scale;
}

// Mixin to generate background, text, border, and fill classes
// Example: for "red-300" generates .bg-red-300 { background-color: ... }
@mixin generate-color-classes($color-map) {
  @each $key, $val in $color-map {
    .bg-#{$key} {
      background-color: $val !important;
    }
    .text-#{$key} {
      color: $val !important;
    }
    .border-#{$key} {
      border-color: $val !important;
    }
    .fill-#{$key} {
      fill: $val !important;
    }
  }
}

// ========================================
// Containers
// ========================================

// Creiamo un mixin che generi dinamicamente le regole .container per ogni breakpoint
@mixin container-max-widths($breakpoints, $max-widths) {
  @each $label, $min-width in $breakpoints {
    // Eseguiamo il media query solo se anche in $max-widths esiste la stessa chiave ($label)
    @if map-has-key($max-widths, $label) {
      @media (min-width: #{map-get($breakpoints, $label)}) {
        .container {
          max-width: map-get($max-widths, $label);
        }
      }
    }
  }
}

// Infine richiamiamo il mixin passando le due mappe
@include container-max-widths($grid-breakpoints, $container-max-widths);





